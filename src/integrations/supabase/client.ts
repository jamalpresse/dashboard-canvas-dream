
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jajkfzwzmogpkwzclisv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imphamtmend6bW9ncGt3emNsaXN2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2OTY4ODksImV4cCI6MjA2MjI3Mjg4OX0.1iDX0yqCmE28tocq6zfkt7_v5b4vv_A_H0rqBRnvxHI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'implicit',
  }
});

// Debug utility to check auth status
export const checkAuthStatus = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('Error checking auth status:', error);
      return null;
    }
    
    return {
      session: data.session,
      user: data.session?.user ?? null
    };
  } catch (e) {
    console.error('Exception checking auth status:', e);
    return null;
  }
};

// Thorough auth state cleanup utility
export const cleanupAuthState = () => {
  try {
    // Remove standard auth tokens
    localStorage.removeItem('supabase.auth.token');
    
    // Remove all Supabase auth keys from localStorage
    Object.keys(localStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        localStorage.removeItem(key);
      }
    });
    
    // Remove from sessionStorage if in use
    Object.keys(sessionStorage || {}).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
    
    console.log('Auth state cleaned up');
  } catch (err) {
    console.error('Error cleaning up auth state:', err);
  }
};

// Safe sign out function that cleans up state
export const safeSignOut = async () => {
  try {
    // Clean up existing state first
    cleanupAuthState();
    
    // Attempt global sign out
    await supabase.auth.signOut({ scope: 'global' });
    
    return { success: true };
  } catch (error) {
    console.error('Error during sign out:', error);
    return { success: false, error };
  }
};

// Handle API errors consistently
export const handleSupabaseError = (error: any, defaultMessage = "Une erreur est survenue") => {
  console.error('Supabase error:', error);
  
  // Return a user-friendly error message
  if (error?.message) {
    return error.message;
  }
  
  if (error?.error_description) {
    return error.error_description;
  }
  
  return defaultMessage;
};
